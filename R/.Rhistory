rk <- sort(as.vector(unlist(ymat[i, ])))
rk <- sort(rk[!is.na(rk)])
Q[,i] <- rk
q_diff[i] <- abs(rk[2]-rk[1])
}
tstat <- sum(ymat[,1])
Ik <- which(rank(q_diff,ties.method="first") <= k)
monte <- matrix(nrow=I,ncol=10000)
for (i in 1:I){
if (i %in% Ik){
monte[i,] <- sample(Q[,i],size=10000,replace=T,prob=c(1/(1+gamma),gamma/(1+gamma)))
}
else{
monte[i,] <- rep(Q[2,i],10000)
}
}
pval <- mean(colSums(monte)>=tstat)
result <- list(pval = pval, statistic = tstat)
}
result
}
senmk <- function (y, z, mset, k, gamma = 1, inner = 0, trim = 3, lambda = 1/2,
tau = 0, alternative = "greater", TonT = FALSE, precise=FALSE)
{
# This is based on the senm function from sensitivitymult
stopifnot((alternative == "greater") | (alternative == "less"))
stopifnot(gamma >= 1)
stopifnot((inner >= 0) & (inner <= trim))
stopifnot((lambda > 0) & (lambda < 1))
stopifnot(is.vector(y) & is.vector(z) & is.vector(mset))
stopifnot((length(z) == length(y)))
stopifnot((length(z) == length(mset)))
stopifnot(all(!is.na(y)))
stopifnot(all((z == 0) | (z == 1)))
tbcheck <- table(z, mset)
ck <- all(tbcheck[2, ] == 1) & all(tbcheck[1, ] >= 1)
if (!ck) {
warning("Every matched set must contain one treated subject and at least one control.")
stopifnot(ck)
}
mset <- as.integer(mset)
o <- order(mset, 1 - z)
y <- y[o]
z <- z[o]
mset <- mset[o]
tb <- table(mset)
nset <- length(tb)
setsize <- max(tb)
makeymat <- function(yj) {
ymat <- matrix(NA, nset, setsize)
m <- 0
for (i in 1:nset) {
ymat[i, 1:tb[i]] <- yj[(m + 1):(m + tb[i])]
m <- m + tb[i]
}
ymat
}
ymat <- makeymat(y)
if (alternative == "less") {
ymat <- (-ymat)
tau <- (-tau)
}
if (!(tau == 0))
ymat[, 1] <- ymat[, 1] - tau
ms <- mscorev(ymat, inner = inner, trim = trim, qu = lambda,
TonT = TonT)
separable1vk(ms, gamma = gamma, k, precise)
}
# Plot
Gamma_seq <- function(y, z, mset, inner = 0, trim = 3, thres, K, tol=0.0001,precise=FALSE)
{
# Get Gamma_{[k]} (k=I, I-1, ..., I-K+1)
I <- sum(z)
Gamma <- rep(1,K)
for (i in 1:K){
if ((i>1)&&(Gamma[i-1]==1)){Gamma[i]=1}
else{
f <- function(gamma){senmk(y,z,mset,k=I-i+1,gamma=gamma,inner=inner,trim=trim,precise=precise)$pval-thres}
if (f(1)<0){
gamma_sol <- uniroot(f, lower = 1.00000001, upper = 100000, extendInt = "no",tol=tol)$root
if(f(gamma_sol) > 0){
while( f(gamma_sol) > 0 ){
gamma_sol = gamma_sol - tol
}
gamma_sol = gamma_sol + tol
}else{
while( f(gamma_sol) <= 0 ){
gamma_sol = gamma_sol + tol
}
}
}
else {gamma_sol = 1 }
Gamma[i] <- gamma_sol
}
print(i)
}
Gamma
}
####################  Simulation 1  ########################
######## Data Generating #########
I <- 500
mset <- as.vector(rbind(1:I,1:I))
z <- as.vector(rbind(rep(1,I),rep(0,I)))
set.seed(111)
y1 <- rnorm(2*I,sd=0.5)+0.5*z
y2 <- rnorm(2*I,sd=0.5)+1*z
### tau=0.5
inner_set <- seq(0,2.5,0.5)
trim <- 3
Gamma_record1 <- matrix(rep(0,6*200),ncol=200)
for (i in 1:6){
inner <- inner_set[i]
Gamma_record1[i,] <- Gamma_seq(y1,z,mset,trim=trim,inner=inner,K=200,thres=0.05,precise=TRUE)
print("finish one")
}
### tau=1
Gamma_record2 <- matrix(rep(0,6*200),ncol=200)
for (i in 1:6){
inner <- inner_set[i]
Gamma_record2[i,] <- Gamma_seq(y2,z,mset,trim=trim,inner=inner,K=200,thres=0.05,precise=TRUE)
print("finish one")
}
separable1vk <- function (ymat, gamma = 1, k, precise=FALSE)
{
I <- dim(ymat)[1]
n <- dim(ymat)[2]
mu_inf <- rep(NA,I)
mu_gamma <- rep(NA,I)
var_inf <- rep(NA,I)
var_gamma <- rep(NA,I)
tstat <- 0
if (precise==FALSE){
for (i in 1:I) {
if (!is.na(ymat[i, 1])) {
rk <- sort(as.vector(unlist(ymat[i, ])))
rk <- sort(rk[!is.na(rk)])
ni <- length(rk)
mu_gamma[i] <- (-Inf)
var_gamma[i] <- (-Inf)
mu_inf[i] <- rk[ni]
var_inf[i] <- 0
for (ai in 1:(ni - 1)) {
mu_ia_gamma <- (sum(rk[1:ai]) + gamma * sum(rk[(ai + 1):ni])) / (ai + gamma * (ni - ai))
var_ia_gamma <- ((sum(rk[1:ai]^2) + gamma * sum(rk[(ai + 1):ni]^2)) / (ai + gamma * (ni - ai))) - (mu_ia_gamma^2)
if (mu_ia_gamma > mu_gamma[i]) {
mu_gamma[i] <- mu_ia_gamma
var_gamma[i] <- var_ia_gamma
}
else if (mu_ia_gamma == mu_gamma[i])
var_gamma[i] <- max(var_gamma[i], var_ia_gamma)
}
}
}
tstat <- sum(ymat[,1])
mu_diff <- mu_inf - mu_gamma
v_sort <- sort(var_gamma,decreasing = T,index.return = T)
diff_resort <- mu_diff[v_sort$ix]
diff_sort_res <- sort(diff_resort,index.return=T)
gamma_index <- v_sort$ix[diff_sort_res$ix[1:k]]
mu_gamma_k <- sum(mu_gamma[gamma_index])+sum(mu_inf[-gamma_index])
var_gamma_k <- sum(var_gamma[gamma_index])+sum(var_inf[-gamma_index])
tstat <- as.vector(tstat)
dev <- (tstat - mu_gamma_k)/sqrt(var_gamma_k)
pval <- 1 - stats::pnorm(dev)
result <- list(pval = pval, deviate = dev, statistic = tstat, expectation = mu_gamma_k,
variance = var_gamma_k)
}
if (precise==TRUE){
tstat <- 0
q_diff <- rep(0,I)
Q <- matrix(nrow=2,ncol=I)
for (i in 1:I) {
rk <- sort(as.vector(unlist(ymat[i, ])))
rk <- sort(rk[!is.na(rk)])
Q[,i] <- rk
q_diff[i] <- abs(rk[2]-rk[1])
}
tstat <- sum(ymat[,1])
Ik <- which(rank(q_diff,ties.method="first") <= k)
monte <- matrix(nrow=I,ncol=10000)
for (i in 1:I){
if (i %in% Ik){
monte[i,] <- sample(Q[,i],size=10000,replace=T,prob=c(1/(1+gamma),gamma/(1+gamma)))
}
else{
monte[i,] <- rep(Q[2,i],10000)
}
}
pval <- mean(colSums(monte)>=tstat)
result <- list(pval = pval, statistic = tstat)
}
result
}
senmk <- function (y, z, mset, k, gamma = 1, inner = 0, trim = 3, lambda = 1/2,
tau = 0, alternative = "greater", TonT = FALSE, precise=FALSE)
{
# This is based on the senm function from sensitivitymult
stopifnot((alternative == "greater") | (alternative == "less"))
stopifnot(gamma >= 1)
stopifnot((inner >= 0) & (inner <= trim))
stopifnot((lambda > 0) & (lambda < 1))
stopifnot(is.vector(y) & is.vector(z) & is.vector(mset))
stopifnot((length(z) == length(y)))
stopifnot((length(z) == length(mset)))
stopifnot(all(!is.na(y)))
stopifnot(all((z == 0) | (z == 1)))
tbcheck <- table(z, mset)
ck <- all(tbcheck[2, ] == 1) & all(tbcheck[1, ] >= 1)
if (!ck) {
warning("Every matched set must contain one treated subject and at least one control.")
stopifnot(ck)
}
mset <- as.integer(mset)
o <- order(mset, 1 - z)
y <- y[o]
z <- z[o]
mset <- mset[o]
tb <- table(mset)
nset <- length(tb)
setsize <- max(tb)
makeymat <- function(yj) {
ymat <- matrix(NA, nset, setsize)
m <- 0
for (i in 1:nset) {
ymat[i, 1:tb[i]] <- yj[(m + 1):(m + tb[i])]
m <- m + tb[i]
}
ymat
}
ymat <- makeymat(y)
if (alternative == "less") {
ymat <- (-ymat)
tau <- (-tau)
}
if (!(tau == 0))
ymat[, 1] <- ymat[, 1] - tau
ms <- mscorev(ymat, inner = inner, trim = trim, qu = lambda,
TonT = TonT)
separable1vk(ms, gamma = gamma, k, precise)
}
# Plot
Gamma_seq <- function(y, z, mset, inner = 0, trim = 3, thres, K, tol=0.0001,precise=FALSE)
{
# Get Gamma_{[k]} (k=I, I-1, ..., I-K+1)
I <- sum(z)
Gamma <- rep(1,K)
for (i in 1:K){
if ((i>1)&&(Gamma[i-1]==1)){Gamma[i]=1}
else{
f <- function(gamma){senmk(y,z,mset,k=I-i+1,gamma=gamma,inner=inner,trim=trim,precise=precise)$pval-thres}
if (f(1)<0){
gamma_sol <- uniroot(f, lower = 1.00000001, upper = 100000, extendInt = "no",tol=tol)$root
if(f(gamma_sol) > 0){
while( f(gamma_sol) > 0 ){
gamma_sol = gamma_sol - tol
}
gamma_sol = gamma_sol + tol
}else{
while( f(gamma_sol) <= 0 ){
gamma_sol = gamma_sol + tol
}
}
}
else {gamma_sol = 1 }
Gamma[i] <- gamma_sol
}
print(i)
}
Gamma
}
I <- 500
mset <- as.vector(rbind(1:I,1:I))
z <- as.vector(rbind(rep(1,I),rep(0,I)))
set.seed(111)
y1 <- rnorm(2*I,sd=0.5)+0.5*z
y2 <- rnorm(2*I,sd=0.5)+1*z
### tau=0.5
inner_set <- seq(0,2.5,0.5)
trim <- 3
Gamma_record1 <- matrix(rep(0,6*200),ncol=200)
for (i in 1:6){
inner <- inner_set[i]
Gamma_record1[i,] <- Gamma_seq(y1,z,mset,trim=trim,inner=inner,K=200,thres=0.05,precise=TRUE)
print("finish one")
}
### tau=1
Gamma_record2 <- matrix(rep(0,6*200),ncol=200)
for (i in 1:6){
inner <- inner_set[i]
Gamma_record2[i,] <- Gamma_seq(y2,z,mset,trim=trim,inner=inner,K=200,thres=0.05,precise=TRUE)
print("finish one")
}
i<-6
Gamma_record1[i,] <- Gamma_seq(y1,z,mset,trim=trim,inner=inner,K=1,thres=0.05,precise=TRUE)
Gamma_seq(y2,z,mset,trim=trim,inner=inner,K=1,thres=0.05,precise=TRUE)
####################  Simulation 2  ########################
###1: I=1000,c=1
I <- 1000
c <- 1
mset <- as.vector(rbind(1:I,1:I))
z <- as.vector(rbind(rep(1,I),rep(0,I)))
c(rep(c/0.80,0.80*I*2),rep(0,(1-0.80)*I*2))*z
c(rep(c/0.03,0.03*I*2),rep(0,(1-0.03)*I*2))*z
c(rep(c/0.80,0.80*I*2),rep(0,(1-0.80)*I*2))
length(c(rep(c/0.80,0.80*I*2),rep(0,(1-0.80)*I*2)))
length(c(rep(c/0.80,0.80*I*2),rep(0,0.2*I*2)))
Gamma_record2 <- matrix(rep(0,6*200),ncol=200)
for (i in 1:6){
inner <- inner_set[i]
Gamma_record2[i,] <- Gamma_seq(y2,z,mset,trim=trim,inner=inner,K=10,thres=0.05,precise=TRUE)
}
library("sensitivitymult")
separable1vk <- function (ymat, gamma = 1, k, precise=FALSE)
{
I <- dim(ymat)[1]
n <- dim(ymat)[2]
mu_inf <- rep(NA,I)
mu_gamma <- rep(NA,I)
var_inf <- rep(NA,I)
var_gamma <- rep(NA,I)
tstat <- 0
if (precise==FALSE){
for (i in 1:I) {
if (!is.na(ymat[i, 1])) {
rk <- sort(as.vector(unlist(ymat[i, ])))
rk <- sort(rk[!is.na(rk)])
ni <- length(rk)
mu_gamma[i] <- (-Inf)
var_gamma[i] <- (-Inf)
mu_inf[i] <- rk[ni]
var_inf[i] <- 0
for (ai in 1:(ni - 1)) {
mu_ia_gamma <- (sum(rk[1:ai]) + gamma * sum(rk[(ai + 1):ni])) / (ai + gamma * (ni - ai))
var_ia_gamma <- ((sum(rk[1:ai]^2) + gamma * sum(rk[(ai + 1):ni]^2)) / (ai + gamma * (ni - ai))) - (mu_ia_gamma^2)
if (mu_ia_gamma > mu_gamma[i]) {
mu_gamma[i] <- mu_ia_gamma
var_gamma[i] <- var_ia_gamma
}
else if (mu_ia_gamma == mu_gamma[i])
var_gamma[i] <- max(var_gamma[i], var_ia_gamma)
}
}
}
tstat <- sum(ymat[,1])
mu_diff <- mu_inf - mu_gamma
v_sort <- sort(var_gamma,decreasing = T,index.return = T)
diff_resort <- mu_diff[v_sort$ix]
diff_sort_res <- sort(diff_resort,index.return=T)
gamma_index <- v_sort$ix[diff_sort_res$ix[1:k]]
mu_gamma_k <- sum(mu_gamma[gamma_index])+sum(mu_inf[-gamma_index])
var_gamma_k <- sum(var_gamma[gamma_index])+sum(var_inf[-gamma_index])
tstat <- as.vector(tstat)
dev <- (tstat - mu_gamma_k)/sqrt(var_gamma_k)
pval <- 1 - stats::pnorm(dev)
result <- list(pval = pval, deviate = dev, statistic = tstat, expectation = mu_gamma_k,
variance = var_gamma_k)
}
if (precise==TRUE){
tstat <- 0
q_diff <- rep(0,I)
Q <- matrix(nrow=2,ncol=I)
for (i in 1:I) {
rk <- sort(as.vector(unlist(ymat[i, ])))
rk <- sort(rk[!is.na(rk)])
Q[,i] <- rk
q_diff[i] <- abs(rk[2]-rk[1])
}
tstat <- sum(ymat[,1])
Ik <- which(rank(q_diff,ties.method="first") <= k)
monte <- matrix(nrow=I,ncol=10000)
for (i in 1:I){
if (i %in% Ik){
monte[i,] <- sample(Q[,i],size=10000,replace=T,prob=c(1/(1+gamma),gamma/(1+gamma)))
}
else{
monte[i,] <- rep(Q[2,i],10000)
}
}
pval <- mean(colSums(monte)>=tstat)
result <- list(pval = pval, statistic = tstat)
}
result
}
senmk <- function (y, z, mset, k, gamma = 1, inner = 0, trim = 3, lambda = 1/2,
tau = 0, alternative = "greater", TonT = FALSE, precise=FALSE)
{
# This is based on the senm function from sensitivitymult
stopifnot((alternative == "greater") | (alternative == "less"))
stopifnot(gamma >= 1)
stopifnot((inner >= 0) & (inner <= trim))
stopifnot((lambda > 0) & (lambda < 1))
stopifnot(is.vector(y) & is.vector(z) & is.vector(mset))
stopifnot((length(z) == length(y)))
stopifnot((length(z) == length(mset)))
stopifnot(all(!is.na(y)))
stopifnot(all((z == 0) | (z == 1)))
tbcheck <- table(z, mset)
ck <- all(tbcheck[2, ] == 1) & all(tbcheck[1, ] >= 1)
if (!ck) {
warning("Every matched set must contain one treated subject and at least one control.")
stopifnot(ck)
}
mset <- as.integer(mset)
o <- order(mset, 1 - z)
y <- y[o]
z <- z[o]
mset <- mset[o]
tb <- table(mset)
nset <- length(tb)
setsize <- max(tb)
makeymat <- function(yj) {
ymat <- matrix(NA, nset, setsize)
m <- 0
for (i in 1:nset) {
ymat[i, 1:tb[i]] <- yj[(m + 1):(m + tb[i])]
m <- m + tb[i]
}
ymat
}
ymat <- makeymat(y)
if (alternative == "less") {
ymat <- (-ymat)
tau <- (-tau)
}
if (!(tau == 0))
ymat[, 1] <- ymat[, 1] - tau
ms <- mscorev(ymat, inner = inner, trim = trim, qu = lambda,
TonT = TonT)
separable1vk(ms, gamma = gamma, k, precise)
}
# Plot
Gamma_seq <- function(y, z, mset, inner = 0, trim = 3, thres, K, tol=0.0001,precise=FALSE)
{
# Get Gamma_{[k]} (k=I, I-1, ..., I-K+1)
I <- sum(z)
Gamma <- rep(1,K)
for (i in 1:K){
if ((i>1)&&(Gamma[i-1]==1)){Gamma[i]=1}
else{
f <- function(gamma){senmk(y,z,mset,k=I-i+1,gamma=gamma,inner=inner,trim=trim,precise=precise)$pval-thres}
if (f(1)<0){
gamma_sol <- uniroot(f, lower = 1.00000001, upper = 100000, extendInt = "no",tol=tol)$root
if(f(gamma_sol) > 0){
while( f(gamma_sol) > 0 ){
gamma_sol = gamma_sol - tol
}
gamma_sol = gamma_sol + tol
}else{
while( f(gamma_sol) <= 0 ){
gamma_sol = gamma_sol + tol
}
}
}
else {gamma_sol = 1 }
Gamma[i] <- gamma_sol
}
print(i)
}
Gamma
}
####################  Simulation 1  ########################
######## Data Generating #########
I <- 500
mset <- as.vector(rbind(1:I,1:I))
z <- as.vector(rbind(rep(1,I),rep(0,I)))
set.seed(111)
y1 <- rnorm(2*I,sd=0.5)+0.5*z
y2 <- rnorm(2*I,sd=0.5)+1*z
Gamma_record2 <- matrix(rep(0,6*200),ncol=200)
for (i in 1:6){
inner <- inner_set[i]
Gamma_record2[i,] <- Gamma_seq(y2,z,mset,trim=trim,inner=inner,K=10,thres=0.05,precise=TRUE)
}
### tau=0.5
inner_set <- seq(0,2.5,0.5)
Gamma_record2 <- matrix(rep(0,6*200),ncol=200)
for (i in 1:6){
inner <- inner_set[i]
Gamma_record2[i,] <- Gamma_seq(y2,z,mset,trim=trim,inner=inner,K=10,thres=0.05,precise=TRUE)
}
trim <- 3
Gamma_record2 <- matrix(rep(0,6*200),ncol=200)
for (i in 1:6){
inner <- inner_set[i]
Gamma_record2[i,] <- Gamma_seq(y2,z,mset,trim=trim,inner=inner,K=10,thres=0.05,precise=TRUE)
}
I <- 1000
c <- 1
mset <- as.vector(rbind(1:I,1:I))
z <- as.vector(rbind(rep(1,I),rep(0,I)))
I <- 1000
c <- 0.5
mset <- as.vector(rbind(1:I,1:I))
z <- as.vector(rbind(rep(1,I),rep(0,I)))
yB1 <- rnorm(2*I,sd=0.5)+c(rep(c/0.03,0.03*I*2),rep(0,(1-0.03)*I*2))*z
yB2 <- rnorm(2*I,sd=0.5)+c(rep(c/0.20,0.20*I*2),rep(0,(1-0.20)*I*2))*z
yB3 <- rnorm(2*I,sd=0.5)+c(rep(c/0.40,0.40*I*2),rep(0,(1-0.40)*I*2))*z
yB4 <- rnorm(2*I,sd=0.5)+c(rep(c/0.60,0.60*I*2),rep(0,(1-0.60)*I*2))*z
yB5 <- rnorm(2*I,sd=0.5)+c(rep(c/0.80,0.80*I*2),rep(0,0.2*I*2))*z
yB6 <- rnorm(2*I,sd=0.5)+c(rep(c/1,1*I*2),rep(0,(1-1)*I*2))*z
Gamma_B1 <- Gamma_trial(yB1, z, mset, inner = 0, trim = Inf, thres=0.05, K=10, tol=0.001, precise=TRUE)
Gamma_B2 <- Gamma_trial(yB2, z, mset, inner = 0, trim = Inf, thres=0.05, K=10, tol=0.001, precise=TRUE)
Gamma_B3 <- Gamma_trial(yB3, z, mset, inner = 0, trim = Inf, thres=0.05, K=10, tol=0.001, precise=TRUE)
Gamma_B4 <- Gamma_trial(yB4, z, mset, inner = 0, trim = Inf, thres=0.05, K=10, tol=0.001, precise=TRUE)
Gamma_B5 <- Gamma_trial(yB5, z, mset, inner = 0, trim = Inf, thres=0.05, K=10, tol=0.001, precise=TRUE)
Gamma_B6 <- Gamma_trial(yB6, z, mset, inner = 0, trim = Inf, thres=0.05, K=10, tol=0.001, precise=TRUE)
Gamma_B1 <- Gamma_seq(yB1, z, mset, inner = 0, trim = Inf, thres=0.05, K=10, tol=0.001, precise=TRUE)
Gamma_B2 <- Gamma_seq(yB2, z, mset, inner = 0, trim = Inf, thres=0.05, K=10, tol=0.001, precise=TRUE)
Gamma_B3 <- Gamma_seq(yB3, z, mset, inner = 0, trim = Inf, thres=0.05, K=10, tol=0.001, precise=TRUE)
Gamma_B4 <- Gamma_seq(yB4, z, mset, inner = 0, trim = Inf, thres=0.05, K=10, tol=0.001, precise=TRUE)
Gamma_B5 <- Gamma_seq(yB5, z, mset, inner = 0, trim = Inf, thres=0.05, K=10, tol=0.001, precise=TRUE)
Gamma_B6 <- Gamma_seq(yB6, z, mset, inner = 0, trim = Inf, thres=0.05, K=10, tol=0.001, precise=TRUE)
